# Configuration Nixpacks pour Laravel + Inertia SSR
# Solution au conflit yarn/composer via la priorité des packages

[variables]
PORT = "8080"
IS_LARAVEL = "1"
NIXPACKS_PHP_ROOT_DIR = "/app/public"

[phases.setup]
nixPkgs = [
  "...",
  "python311Packages.supervisor",
  # Solution au conflit LICENSE entre yarn et composer
  # On baisse la priorité de composer pour éviter le conflit
  '(lib.recursiveUpdate php84Packages.composer { meta.priority = php84Packages.composer.meta.priority or 0 -1; })'
]

[phases.build]
cmds = [
    # Build des assets frontend avec Vite
    "yarn build",
    
    # Configuration supervisor et nginx
    "mkdir -p /etc/supervisor/conf.d/",
    "cp /assets/worker-*.conf /etc/supervisor/conf.d/",
    "cp /assets/supervisord.conf /etc/supervisord.conf",
    "chmod +x /assets/start.sh",
    "chmod +x /assets/scripts/prestart.mjs"
]

[start]
cmd = '/assets/start.sh'

[staticAssets]
"scripts/prestart.mjs" = '''
#!/usr/bin/env node
import { readFileSync, writeFileSync } from 'fs';

const nginxConfigFile = process.argv[2];
const outputConfigFile = process.argv[3];

const nginxConfig = readFileSync(nginxConfigFile, 'utf8');

const newConfig = nginxConfig
  .replace(/\$if\((.*?)\)\s*\(([\s\S]*?)\)\s*else\s*\(([\s\S]*?)\)/g, (match, condition, ifBlock, elseBlock) => {
    return process.env[condition] ? ifBlock : elseBlock;
  })
  .replace(/\$if\((.*?)\)\s*\(([\s\S]*?)\)/g, (match, condition, ifBlock) => {
    return process.env[condition] ? ifBlock : '';
  })
  .replace(/\$\!\{(.*?)\}/g, (match, varName) => {
    return process.env[varName] || '/usr/share/nginx';
  })
  .replace(/\$\{(.*?)\}/g, (match, varName) => {
    return process.env[varName] || match;
  });

writeFileSync(outputConfigFile, newConfig);
'''

"start.sh" = '''
#!/bin/bash

# Fix permissions for Laravel storage
chown -R www-data:www-data /app/storage /app/bootstrap/cache
chmod -R 775 /app/storage /app/bootstrap/cache

# Transform the nginx configuration
node /assets/scripts/prestart.mjs /assets/nginx.template.conf /etc/nginx.conf

# Run migrations
php artisan migrate --force

# Create storage link
php artisan storage:link --force

# Cache optimization
php artisan config:cache
php artisan route:cache
php artisan view:cache

# Start supervisor
supervisord -c /etc/supervisord.conf -n
'''

"supervisord.conf" = '''
[unix_http_server]
file=/assets/supervisor.sock

[supervisord]
logfile=/var/log/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10
loglevel=info
pidfile=/assets/supervisord.pid
nodaemon=false
silent=false
minfds=1024
minprocs=200

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///assets/supervisor.sock

[include]
files = /etc/supervisor/conf.d/*.conf
'''

"worker-nginx.conf" = '''
[program:worker-nginx]
process_name=%(program_name)s_%(process_num)02d
command=nginx -c /etc/nginx.conf
autostart=true
autorestart=true
stdout_logfile=/var/log/worker-nginx.log
stderr_logfile=/var/log/worker-nginx.log
'''

"worker-phpfpm.conf" = '''
[program:worker-phpfpm]
process_name=%(program_name)s_%(process_num)02d
command=php-fpm -y /assets/php-fpm.conf -F
autostart=true
autorestart=true
stdout_logfile=/var/log/worker-phpfpm.log
stderr_logfile=/var/log/worker-phpfpm.log
'''

"worker-laravel.conf" = '''
[program:worker-laravel]
process_name=%(program_name)s_%(process_num)02d
command=bash -c 'exec php /app/artisan queue:work --sleep=3 --tries=3 --max-time=3600'
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
numprocs=2
startsecs=0
stopwaitsecs=3600
stdout_logfile=/var/log/worker-laravel.log
stderr_logfile=/var/log/worker-laravel.log
'''

"worker-inertia-ssr.conf" = '''
[program:inertia-ssr]
process_name=%(program_name)s_%(process_num)02d
command=bash -c 'exec php /app/artisan inertia:start-ssr'
autostart=true
autorestart=true
stderr_logfile=/var/log/worker-inertia-ssr.log
stdout_logfile=/var/log/worker-inertia-ssr.log
'''

"php-fpm.conf" = '''
[www]
listen = 127.0.0.1:9000
user = www-data
group = www-data
listen.owner = www-data
listen.group = www-data
pm = dynamic
pm.max_children = 50
pm.min_spare_servers = 4
pm.max_spare_servers = 32
pm.start_servers = 18
clear_env = no
php_admin_value[post_max_size] = 100M
php_admin_value[upload_max_filesize] = 100M
'''

"nginx.template.conf" = '''
user www-data www-data;
worker_processes 5;
daemon off;

worker_rlimit_nofile 8192;

events {
  worker_connections 4096;
}

http {
    # MIME types inline au lieu d'un fichier externe
    types {
        text/html                             html htm shtml;
        text/css                              css;
        text/xml                              xml;
        image/gif                             gif;
        image/jpeg                            jpeg jpg;
        image/png                             png;
        image/webp                            webp;
        image/svg+xml                         svg svgz;
        application/javascript                js;
        application/json                      json;
        application/pdf                       pdf;
        font/woff                             woff;
        font/woff2                            woff2;
    }

    index    index.html index.htm index.php;

    default_type application/octet-stream;
    log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx-access.log;
    error_log /var/log/nginx-error.log;
    sendfile     on;
    tcp_nopush   on;
    server_names_hash_bucket_size 128;

    server {
        listen ${PORT};
        listen [::]:${PORT};
        server_name localhost;

        $if(NIXPACKS_PHP_ROOT_DIR) (
            root ${NIXPACKS_PHP_ROOT_DIR};
        ) else (
            root /app/public;
        )

        add_header X-Content-Type-Options "nosniff";

        client_max_body_size 100M;

        index index.php;

        charset utf-8;

        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        error_page 404 /index.php;

        location ~ \.php$ {
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_buffer_size 8k;
            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            # FastCGI params inline
            fastcgi_param QUERY_STRING $query_string;
            fastcgi_param REQUEST_METHOD $request_method;
            fastcgi_param CONTENT_TYPE $content_type;
            fastcgi_param CONTENT_LENGTH $content_length;
            fastcgi_param REQUEST_URI $request_uri;
            fastcgi_param DOCUMENT_URI $document_uri;
            fastcgi_param DOCUMENT_ROOT $document_root;
            fastcgi_param SERVER_PROTOCOL $server_protocol;
            fastcgi_param GATEWAY_INTERFACE CGI/1.1;
            fastcgi_param SERVER_SOFTWARE nginx;
            fastcgi_param REMOTE_ADDR $remote_addr;
            fastcgi_param REMOTE_PORT $remote_port;
            fastcgi_param SERVER_ADDR $server_addr;
            fastcgi_param SERVER_PORT $server_port;
            fastcgi_param SERVER_NAME $server_name;
            fastcgi_param HTTPS $https if_not_empty;
            fastcgi_param REDIRECT_STATUS 200;
        }

        location ~ /\.(?!well-known).* {
            deny all;
        }
    }
}
'''
